openapi: 3.0.3
info:
  title: Library API
  version: 1.0.1
  description: STD22001
servers:
  - url: https://library.com
tags:
  - name: Books
    description: Operations related to books
  - name: Authors
    description: Operations related to authors
  - name: Topics
    description: Operations related to topics  
paths:
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: Retrieve a list of all books in the library, optionally filtered by bookName and releaseDate range. Supports pagination.
      operationId: getBooks
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - in: query
          name: bookName
          description: Filter by book name
          schema:
            type: string
        - in: query
          name: releaseDateMin
          description: Minimum release date
          schema:
            type: string
            format: date
        - in: query
          name: releaseDateMax
          description: Maximum release date
          schema:
            type: string
            format: date
        - in: query
          name: page
          description: Page number
          schema:
            type: integer
            default: 1
        - in: query
          name: pageSize
          description: Number of items per page
          schema:
            type: integer
            default: 50
      responses:
        200:
          description: List of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
                  
    put:
      tags:
        - Books
      summary: Create or update books
      description: Create or update a list of books in the library.
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CrupdateBook' 
      responses:
        200:
          description: List of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    delete:
      tags:
        - Books
      summary: Delete a book
      description: Delete a book from the library by ID.
      operationId: deleteBook
      responses:
        200:
          description: Book deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
                
  /authors:
    get:
      tags:
        - Authors
      summary: Get all authors
      description: Retrieve a list of all authors in the library, optionally filtered by authorName. Supports pagination.
      operationId: getAuthors
      parameters:
        - in: query
          name: authorName
          description: Filter by author name
          schema:
            type: string
        - in: query
          name: page
          description: Page number
          schema:
            type: integer
            default: 1
        - in: query
          name: pageSize
          description: Number of items per page
          schema:
            type: integer
            default: 50
      responses:
        200:
          description: List of authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    put:
      tags:
        - Authors
      summary: Create or update authors
      description: Create or update a list of authors in the library.
      operationId: crupdateAuthors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author'
      responses:
        200:
          description: List of created or updated authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
  /topics:
    get:
      tags:
        - Topics
      summary: Get all topics
      description: Retrieve a list of all topics in the library.
      operationId: getTopics
      responses:
        200:
          description: List of topics
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Topic'

    put:
      tags:
        - Topics
      summary: Create or update topics
      description: Create or update a list of topics in the library.
      operationId: crupdateTopics
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Topic'
      responses:
        200:
          description: List of created or updated topics
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Topic' 
    delete:
      tags:
        - Topics
      summary: Delete a topic
      description: Delete a topic from the library by ID.
      operationId: deleteTopics
      responses:
        200:
          description: Topics deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topic'  

  /authors/{authorId}:
    delete:
      tags:
        - Authors
      summary: Delete an author
      description: Delete an author from the library by ID.
      operationId: deleteAuthor
      parameters:
        - name: authorId
          in: path
          description: ID of the author to delete
          required: true
          schema:
            type: string
      responses:
        200:
          description: Author deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'

  /books/{bookId}/authors/{authorId}:
    put:
      tags:
        - Books
      summary: Attach an Author to a Book
      description: Attach an author to a specific book by specifying their respective IDs.
      operationId: attachAuthorToBook
      parameters:
        - name: bookId
          in: path
          description: ID of the book
          required: true
          schema:
            type: string
        - name: authorId
          in: path
          description: ID of the author
          required: true
          schema:
            type: string
      responses:
        200:
          description: Author attached to the book successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'  
  /authors/{authorsId}/topics/{topicsId}:
    put:
      tags:
        - Authors
        - Topics
      summary: Assign Topics to Author
      description: Assign topics to a specific author by specifying their respective IDs.
      operationId: assignTopicsToAuthor
      parameters:
        - name: authorsId
          in: path
          description: ID of the author
          required: true
          schema:
            type: string
        - name: topicsId
          in: path
          description: ID of the topic
          required: true
          schema:
            type: string
      responses:
        200:
          description: Topics assigned to the author successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
                
  /books/authors:
    put:
      tags:
        - Books
      summary: Update Book Authors
      description: Update the authors of multiple books by specifying the bookId and authorId pairs.
      operationId: updateBookAuthors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateBookAuthor'
      responses:
        200:
          description: Books' authors updated successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /books/topics:
    put:
      tags:
        - Books
      summary: Update Book Topics
      description: Update the topics of multiple books by specifying the bookId and topicsId pairs.
      operationId: updateBookTopics
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                bookId:
                  type: string
                topicsId:
                  type: string
      responses:
        200:
          description: Books' topics updated successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'  
  /authotopics:
    get:
      tags:
        - Topics
      summary: Get all author topics
      description: Retrieve a list of all topics related to authors in the library.
      operationId: getAuthorTopics
      responses:
        200:
          description: List of author topics
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/Topic'
                    - $ref: '#/components/schemas/Author'
  # Comment est ce que vous penser faire si c'etait pas un par un mais c'etait plusieurs en mÃªme temps plusieurs authors
  /authors/batch-update:
    put:
      tags:
        - Authors
      summary: Batch Update Authors
      description: Update a list of authors in the library.
      operationId: batchUpdateAuthors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author'
      responses:
        200:
          description: List of updated authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
                                   
components:
  schemas:
    Book: 
      allOf:
        - $ref: '#/components/schemas/CrupdateBook'
        - type: object
          properties:
            author:
              type: object
              nullable: true
    UpdateBookAuthor:
      type: object
      properties:
        bookId:
          type: string
        authorId:
          type: string

    CrupdateBook:
      type: object
      allOf:
        - $ref: "#/components/schemas/Topic"
      properties:
        id:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: integer
        releaseDate:
          type: string
          format: date
    Author:
      type: object
      properties:
        id:
          type: string
        authorName:
          type: string
        sex:
          $ref: '#/components/schemas/Sex'
    Sex:
      type: string
      enum:
        - M
        - F
    Topic:
      type: object
      properties:
        tipicsId:
          type: string
        topicName:
          type: string
  parameters:
    PageParam:
      in: query
      name: page
      description: Page number
      required: false
      schema:
        type: integer
        default: 1

    PageSizeParam:
      in: query
      name: pageSize
      description: Number of items per page
      required: false
      schema:
        type: integer
        default: 50

# b - 1. UpdateBookAuthor contient uniquement les identifiants bookId et authorId pour mettre Ã  jour la relation livre-auteur spÃ©cifique.
# b - 2. L'objet UpdateBookAuthor devrait inclure les propriÃ©tÃ©s de CrupdateBook et de Author lorsque la mise Ã  jour de la relation entre le livre et l'auteur nÃ©cessite des modifications des dÃ©tails spÃ©cifiques du livre ou de l'auteur en plus de la simple mise Ã  jour de leur relation.
# 3- a La pagination est nÃ©cessaire pour amÃ©liorer les performances des requÃªtes en divisant les rÃ©sultats en pages plus petites, rÃ©duisant ainsi la charge du serveur et amÃ©liorant le temps de rÃ©ponse pour les clients. Cela permet Ã©galement de limiter la quantitÃ© de donnÃ©es retournÃ©es Ã  la fois, ce qui est utile lorsque l'on travaille avec de grands ensembles de donnÃ©es.
# 4- a - Oui, les en-tÃªtes de requÃªte permettent de transmettre des mÃ©tadonnÃ©es sans surcharger les paramÃ¨tres de requÃªte, facilitant ainsi une gestion claire et explicite de la pagination.
#4 -b - La gestion de la pagination via les en-tÃªtes de requÃªte n'est pas obligatoire, mais elle offre une mÃ©thode efficace pour transmettre des mÃ©tadonnÃ©es supplÃ©mentaires sans surcharger les paramÃ¨tres de requÃªte. Cela peut faciliter la lisibilitÃ© et la clartÃ© des requÃªtes, en particulier lors de l'utilisation de nombreux paramÃ¨tres ou de paramÃ¨tres complexes.