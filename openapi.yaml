openapi: 3.0.3
info:
  title: Library API
  version: 1.0.1
  description: STD22001
servers:
  - url: https://library.com
tags:
  - name: Books
    description: Operations related to books
  - name: Authors
    description: Operations related to authors
    
paths:
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: Retrieve a list of all books in the library, optionally filtered by bookName and releaseDate range. Supports pagination.
      operationId: getBooks
      parameters:
        - $ref: '#/components/parameters/queryPagination'
        - $ref: '#/components/parameters/pathPagination'
        - in: query
          name: bookName
          description: Filter by book name
          schema:
            type: string
        - in: query
          name: releaseDateMin
          description: Minimum release date
          schema:
            type: string
            format: date
        - in: query
          name: releaseDateMax
          description: Maximum release date
          schema:
            type: string
            format: date

      responses:
        200:
          description: List of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '400':
          $ref: '#/components/responses/Status400'
        '403':
          $ref: "#/components/responses/Status403"
        '500':
          $ref: "#/components/responses/Status500"
    put:
      tags:
        - Books
      summary: Create or update books
      description: Create or update a list of books in the library.
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CrupdateBook' 
      responses:
        200:
          description: List of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        400:
          $ref: '#/components/responses/Status400'
        403:
          $ref: "#/components/responses/Status403"
        500:
          $ref: "#/components/responses/Status500"

    delete:
      tags:
        - Books
      summary: Delete a book
      description: Delete a book from the library by ID.
      operationId: deleteBook
      responses:
        200:
          description: Book deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        400:
          $ref: '#/components/responses/Status400'
        403:
          $ref: "#/components/responses/Status403"
        500:
          $ref: "#/components/responses/Status500"        
  /authors:
    get:
      tags:
        - Authors
      summary: Get all authors
      description: Retrieve a list of all authors in the library, optionally filtered by authorName. Supports pagination.
      operationId: getAuthors
      parameters:
        - in: query
          name: authorName
          description: Filter by author name
          schema:
            type: string
        - $ref: '#/components/parameters/queryPagination'
        - $ref: '#/components/parameters/pathPagination'
      responses:
        200:
          description: List of authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
        400:
          $ref: '#/components/responses/Status400'
        403:
          $ref: "#/components/responses/Status403"
        500:
          $ref: "#/components/responses/Status500"          
    put:
      tags:
        - Authors
      summary: Create or update authors
      description: Create or update a list of authors in the library.
      operationId: crupdateAuthors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author'
      responses:
        200:
          description: List of created or updated authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author' 
        400:
          $ref: '#/components/responses/Status400'
        403:
          $ref: "#/components/responses/Status403"
        500:
          $ref: "#/components/responses/Status500"

  /authors/{authorId}:
    delete:
      tags:
        - Authors
      summary: Delete an author
      description: Delete an author from the library by ID.
      operationId: deleteAuthor
      parameters:
        - name: authorId
          in: path
          description: ID of the author to delete
          required: true
          schema:
            type: string
      responses:
        200:
          description: Author deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        400:
          $ref: '#/components/responses/Status400'
        403:
          $ref: "#/components/responses/Status403"
        500:
          $ref: "#/components/responses/Status500"

  /books/{bookId}/authors/{authorId}:
    put:
      tags:
        - Books
      summary: Attach an Author to a Book
      description: Attach an author to a specific book by specifying their respective IDs.
      operationId: attachAuthorToBook
      parameters:
        - name: bookId
          in: path
          description: ID of the book
          required: true
          schema:
            type: string
        - name: authorId
          in: path
          description: ID of the author
          required: true
          schema:
            type: string
      responses:
        200:
          description: Author attached to the book successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'  
        400:
          $ref: '#/components/responses/Status400'
        403:
          $ref: "#/components/responses/Status403"
        500:
          $ref: "#/components/responses/Status500"

  /books/authors:
    put:
      tags:
        - Books
      summary: Update Book Authors
      description: Update the authors of multiple books by specifying the bookId and authorId pairs.
      operationId: updateBookAuthors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateBookAuthor'
      responses:
        200:
          description: Books' authors updated successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book' 
        400:
          $ref: '#/components/responses/Status400'
        403:
          $ref: "#/components/responses/Status403"
        500:
          $ref: "#/components/responses/Status500"

  # Comment est ce que vous penser faire si c'etait pas un par un mais c'etait plusieurs en mÃªme temps plusieurs authors
  /authors/batch-update:
    put:
      tags:
        - Authors
      summary: Batch Update Authors
      description: Update a list of authors in the library.
      operationId: batchUpdateAuthors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author'
      responses:
        200:
          description: List of updated authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
        400:
          $ref: '#/components/responses/Status400'
        403:
          $ref: "#/components/responses/Status403"
        500:
          $ref: "#/components/responses/Status500"    
  /books/import:
    post:
      tags:
        - Books
      summary: Import books from Excel or JSON
      description: Import books into the library from Excel or JSON files. Supports both formats.
      operationId: importBooks
      requestBody:
        required: true
        description: Excel or JSON file containing a list of books
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportAuthor'
          application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
            schema:
              $ref: '#/components/schemas/ImportAuthor'
      responses:
        200:
          description: List of imported books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        400:
          $ref: '#/components/responses/Status400'
        403:
          $ref: "#/components/responses/Status403"
        500:
          $ref: "#/components/responses/Status500"

  /authors/import:
    post:
      tags:
        - Authors
      summary: Import authors from Excel or JSON
      description: Import authors into the library from Excel or JSON files. Supports both formats.
      operationId: importAuthors
      requestBody:
        required: true
        description: Excel or JSON file containing a list of authors
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportAuthor'
          application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
            schema:
              $ref: '#/components/schemas/ImportAuthor'

      responses:
        200:
          description: List of imported authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
        400:
          $ref: '#/components/responses/Status400'
        403:
          $ref: "#/components/responses/Status403"
        500:
          $ref: "#/components/responses/Status500"                               
components:
  schemas:
    ImportAuthor:
      oneOf:
        - $ref: "#/components/schemas/Author"
        - $ref: "#/components/schemas/Book"

    StatusResponse:
      description: Common response for all status codes
      type: object
      properties:
        status:
          type: object
          properties:
            code:
              type: integer
            message:
              type: string
    Book: 
      allOf:
        - $ref: '#/components/schemas/CrupdateBook'
        - type: object
          properties:
            author:
              type: object
              nullable: true
    UpdateBookAuthor:
      type: object
      properties:
        bookId:
          type: string
        authorId:
          type: string

    CrupdateBook:
      type: object
      allOf:
        - $ref: "#/components/schemas/Topic"
      properties:
        id:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: integer
        releaseDate:
          type: string
          format: date
    Author:
      type: object
      properties:
        id:
          type: string
        authorName:
          type: string
        sex:
          $ref: '#/components/schemas/Sex'
    Sex:
      type: string
      enum:
        - M
        - F
    Topic:
      type: string
      enum: 
      - ROMANCE
      - COMEDY
      - OTHER
    Status:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string

  parameters:
    queryPagination:
      in: query
      name: page
      description: Page number
      required: false
      schema:
        type: integer
        default: 1

    pathPagination:
      in: query
      name: pageSize
      description: Number of items per page
      required: false
      schema:
        type: integer
        default: 50

  responses:
    Status400:
      description: Bad request
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/StatusResponse'
              - type: object
                properties:
                  body:
                    type: object

    Status403:
      description: Forbidden
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/StatusResponse'
              - type: object
                properties:
                  body:
                    type: object

    Status500:
      description: Internal server error
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/StatusResponse'
              - type: object
                properties:
                  body:
                    type: object
# b - 1. UpdateBookAuthor contient uniquement les identifiants bookId et authorId pour mettre Ã  jour la relation livre-auteur spÃ©cifique.
# b - 2. L'objet UpdateBookAuthor devrait inclure les propriÃ©tÃ©s de CrupdateBook et de Author lorsque la mise Ã  jour de la relation entre le livre et l'auteur nÃ©cessite des modifications des dÃ©tails spÃ©cifiques du livre ou de l'auteur en plus de la simple mise Ã  jour de leur relation.
# 3- a La pagination est nÃ©cessaire pour amÃ©liorer les performances des requÃªtes en divisant les rÃ©sultats en pages plus petites, rÃ©duisant ainsi la charge du serveur et amÃ©liorant le temps de rÃ©ponse pour les clients. Cela permet Ã©galement de limiter la quantitÃ© de donnÃ©es retournÃ©es Ã  la fois, ce qui est utile lorsque l'on travaille avec de grands ensembles de donnÃ©es.
# 4- a - Oui, les en-tÃªtes de requÃªte permettent de transmettre des mÃ©tadonnÃ©es sans surcharger les paramÃ¨tres de requÃªte, facilitant ainsi une gestion claire et explicite de la pagination.
#4 -b - La gestion de la pagination via les en-tÃªtes de requÃªte n'est pas obligatoire, mais elle offre une mÃ©thode efficace pour transmettre des mÃ©tadonnÃ©es supplÃ©mentaires sans surcharger les paramÃ¨tres de requÃªte. Cela peut faciliter la lisibilitÃ© et la clartÃ© des requÃªtes, en particulier lors de l'utilisation de nombreux paramÃ¨tres ou de paramÃ¨tres complexes.

#TD3-3-a et b:  Vous avez ajoutÃ© deux points d'entrÃ©e, "POST /books/import" et "POST /authors/import," pour gÃ©rer l'importation de livres et d'auteurs Ã  partir de fichiers Excel et JSON. Les rÃ©ponses pour les codes de statut 200, 400, 403 et 500 suivent une structure commune grÃ¢ce Ã  l'utilisation du composant "StatusResponse." Vous avez Ã©galement expliquÃ© l'importance de la pagination pour amÃ©liorer les performances et l'utilisation des en-tÃªtes de requÃªte pour gÃ©rer la pagination de maniÃ¨re claire et explicite.