openapi: 3.0.3
info:
  title: Library API
  version: 1.0.1
  description: STD22001
servers:
  - url: https://library.com
tags:
  - name: Books
    description: Operations related to books
  - name: Authors
    description: Operations related to authors
paths:
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: Retrieve a list of all books in the library, optionally filtered by bookName and releaseDate range.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter by book name
          schema:
            type: string
        - in: query
          name: releaseDateMin
          description: Minimum release date
          schema:
            type: string
            format: date
        - in: query
          name: releaseDateMax
          description: Maximum release date
          schema:
            type: string
            format: date
      responses:
        200:
          description: List of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    put:
      tags:
        - Books
      summary: Create or update books
      description: Create or update a list of books in the library.
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CrupdateBook' 
      responses:
        200:
          description: List of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    delete:
      tags:
        - Books
      summary: Delete a book
      description: Delete a book from the library by ID.
      operationId: deleteBook
      responses:
        200:
          description: Book deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
  /authors:
    get:
      tags:
        - Authors
      summary: Get all authors
      description: Retrieve a list of all authors in the library, optionally filtered by authorName.
      operationId: getAuthors
      parameters:
        - in: query
          name: authorName
          description: Filter by author name
          schema:
            type: string
      responses:
        200:
          description: List of authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    put:
      tags:
        - Authors
      summary: Create or update authors
      description: Create or update a list of authors in the library.
      operationId: crupdateAuthors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author'
      responses:
        200:
          description: List of created or updated authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
  /authors/{authorId}:
    delete:
      tags:
        - Authors
      summary: Delete an author
      description: Delete an author from the library by ID.
      operationId: deleteAuthor
      parameters:
        - name: authorId
          in: path
          description: ID of the author to delete
          required: true
          schema:
            type: string
      responses:
        200:
          description: Author deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'

  /books/{bookId}/authors/{authorId}:
    put:
      tags:
        - Books
      summary: Attach an Author to a Book
      description: Attach an author to a specific book by specifying their respective IDs.
      operationId: attachAuthorToBook
      parameters:
        - name: bookId
          in: path
          description: ID of the book
          required: true
          schema:
            type: string
        - name: authorId
          in: path
          description: ID of the author
          required: true
          schema:
            type: string
      responses:
        200:
          description: Author attached to the book successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'  

  /books/authors:
    put:
      tags:
        - Books
      summary: Update Book Authors
      description: Update the authors of multiple books by specifying the bookId and authorId pairs.
      operationId: updateBookAuthors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateBookAuthor'
      responses:
        200:
          description: Books' authors updated successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
                                            
components:
  schemas:
    Book: 
      allOf:
        - $ref: '#/components/schemas/CrupdateBook'
        - type: object
          properties:
            author:
              type: object
              nullable: true
    UpdateBookAuthor:
      type: object
      properties:
        bookId:
          type: string
        authorId:
          type: string

    CrupdateBook:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
    Author:
      type: object
      properties:
        id:
          type: string
        authorName:
          type: string
        sex:
          $ref: '#/components/schemas/Sex'
    Sex:
      type: string
      enum:
        - M
        - F
