openapi: 3.0.3
info:
  title: Library API
  version: 1.0.0
  description: STD22036
servers:
  - url: https://library.com
paths:
  /books:
    get:
      summary: Get all books
      description: Retrieve all books ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter books by name
          schema:
            type: string
        - in: query
          name: releaseDateInterval
          description: Filter books by release date intervals
          schema:
            type: string
      responses:
        200:
          description: List of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    put:
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
        200:
          description: List of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /authors:
    get:
      summary: Get all authors
      description: Retrieve a list of all authors
      operationId: getAuthors
      parameters:
        - in: query
          name: authorName
          description: Filter authors by name
          schema:
            type: string
      responses:
        200:
          description: List of filtered authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    put:
      summary: Create or update an author
      operationId: crupdateAuthor
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        200:
          description: Created or updated author
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
    delete:
      summary: Delete an author
      description: Delete an author by ID
      operationId: deleteAuthor
      parameters:
        - in: path
          name: authorId
          required: true
          description: ID of the author to delete
          schema:
            type: string
      responses:
        204:
          description: Author successfully deleted
        404:
          description: Author not found
components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        author:
          $ref: '#/components/schemas/Author'
        pageNumbers:
          type: integer
        topic:
          type: string
          enum: [ROMANCE, COMEDY, OTHER]
        releaseDate:
          type: string
          format: date
    Author:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        sex:
          type: string
          enum: [M, F]
